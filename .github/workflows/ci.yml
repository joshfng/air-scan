name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: |
        poetry run pytest test_adsb.py -v --tb=short
      env:
        # Skip hardware-dependent tests in CI
        CI: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --only=dev

    - name: Check code formatting with Black
      run: |
        poetry run black --check --diff . --exclude="\.venv|__pycache__|\.git|\.pytest_cache|build|dist|.*\.egg-info"

    - name: Lint with flake8
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,__pycache__,.git,.pytest_cache,build,dist,*.egg-info
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=.venv,__pycache__,.git,.pytest_cache,build,dist,*.egg-info

    - name: Check import sorting with isort (if available)
      run: |
        if poetry run pip list | grep -q isort; then
          poetry run isort --check-only --diff . --skip-glob=".venv/*" --skip-glob="__pycache__/*"
        else
          echo "isort not installed, skipping import sorting check"
        fi
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Check for security vulnerabilities
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        pip install safety
        safety check -r requirements.txt
      continue-on-error: true

  markdown:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Lint Markdown files
      uses: DavidAnson/markdownlint-cli2-action@v13
      with:
        globs: '**/*.md'
